/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export const SPEC_VERSION = "0.0.1"; 
export interface R {
  type?: {[key: string]: any};
  code?: number;
  message?: string;
  data?: {[key: string]: any};
  count?: number;
  return_at?: string;
}

export interface CreatePostRequest {
  title?: string;
  content?: string;
  forumId?: number;
}

export interface RegisterRequest {
  email?: string;
  validateCode?: string;
  password?: string;
}

export interface LoginRequest {
  email?: string;
  password?: string;
}

export interface User2PathParams {
  id: number
}

export type User2Props = Omit<GetProps<R, unknown, void, User2PathParams>, "path"> & User2PathParams;

/**
 * 获取指定用户的所有信息
 */
export const User2 = ({id, ...props}: User2Props) => (
  <Get<R, unknown, void, User2PathParams>
    path={`/api/user/${id}`}
    
    {...props}
  />
);

export type UseUser2Props = Omit<UseGetProps<R, unknown, void, User2PathParams>, "path"> & User2PathParams;

/**
 * 获取指定用户的所有信息
 */
export const useUser2 = ({id, ...props}: UseUser2Props) => useGet<R, unknown, void, User2PathParams>((paramsInPath: User2PathParams) => `/api/user/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface UserPathParams {
  id: number
}

export interface UserRequestBody {[key: string]: any}

export type UserProps = Omit<MutateProps<R, unknown, void, UserRequestBody, UserPathParams>, "path" | "verb"> & UserPathParams;

/**
 * 管理员侧更新个人信息
 */
export const User = ({id, ...props}: UserProps) => (
  <Mutate<R, unknown, void, UserRequestBody, UserPathParams>
    verb="PUT"
    path={`/api/user/${id}`}
    
    {...props}
  />
);

export type UseUserProps = Omit<UseMutateProps<R, unknown, void, UserRequestBody, UserPathParams>, "path" | "verb"> & UserPathParams;

/**
 * 管理员侧更新个人信息
 */
export const useUser = ({id, ...props}: UseUserProps) => useMutate<R, unknown, void, UserRequestBody, UserPathParams>("PUT", (paramsInPath: UserPathParams) => `/api/user/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface User1RequestBody {[key: string]: any}

export type User1Props = Omit<MutateProps<R, unknown, void, User1RequestBody, void>, "path" | "verb">;

/**
 * 用户自行更新个人信息
 */
export const User1 = (props: User1Props) => (
  <Mutate<R, unknown, void, User1RequestBody, void>
    verb="PUT"
    path={`/api/user/`}
    
    {...props}
  />
);

export type UseUser1Props = Omit<UseMutateProps<R, unknown, void, User1RequestBody, void>, "path" | "verb">;

/**
 * 用户自行更新个人信息
 */
export const useUser1 = (props: UseUser1Props) => useMutate<R, unknown, void, User1RequestBody, void>("PUT", `/api/user/`, props);


export interface ActivePathParams {
  ticketId: number;
  /**
   * type是一个枚举类型，包括open和close，含义为打开或关闭工单
   */
  type: string
}

export type ActiveProps = Omit<MutateProps<R, unknown, void, void, ActivePathParams>, "path" | "verb"> & ActivePathParams;

/**
 * 关闭或重新打开工单
 */
export const Active = ({ticketId, type, ...props}: ActiveProps) => (
  <Mutate<R, unknown, void, void, ActivePathParams>
    verb="PUT"
    path={`/api/ticket/${ticketId}/${type}`}
    
    {...props}
  />
);

export type UseActiveProps = Omit<UseMutateProps<R, unknown, void, void, ActivePathParams>, "path" | "verb"> & ActivePathParams;

/**
 * 关闭或重新打开工单
 */
export const useActive = ({ticketId, type, ...props}: UseActiveProps) => useMutate<R, unknown, void, void, ActivePathParams>("PUT", (paramsInPath: ActivePathParams) => `/api/ticket/${paramsInPath.ticketId}/${paramsInPath.type}`, {  pathParams: { ticketId, type }, ...props });


export interface GetPathParams {
  id: number
}

export type GetProps = Omit<GetProps<R, unknown, void, GetPathParams>, "path"> & GetPathParams;

/**
 * 获取帖子的具体信息
 */
export const Get = ({id, ...props}: GetProps) => (
  <Get<R, unknown, void, GetPathParams>
    path={`/api/post/${id}`}
    
    {...props}
  />
);

export type UseGetProps = Omit<UseGetProps<R, unknown, void, GetPathParams>, "path"> & GetPathParams;

/**
 * 获取帖子的具体信息
 */
export const useGet = ({id, ...props}: UseGetProps) => useGet<R, unknown, void, GetPathParams>((paramsInPath: GetPathParams) => `/api/post/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface UpdatePathParams {
  id: number
}

export type UpdateProps = Omit<MutateProps<R, unknown, void, CreatePostRequest, UpdatePathParams>, "path" | "verb"> & UpdatePathParams;

/**
 * 更新帖子内容
 */
export const Update = ({id, ...props}: UpdateProps) => (
  <Mutate<R, unknown, void, CreatePostRequest, UpdatePathParams>
    verb="PUT"
    path={`/api/post/${id}`}
    
    {...props}
  />
);

export type UseUpdateProps = Omit<UseMutateProps<R, unknown, void, CreatePostRequest, UpdatePathParams>, "path" | "verb"> & UpdatePathParams;

/**
 * 更新帖子内容
 */
export const useUpdate = ({id, ...props}: UseUpdateProps) => useMutate<R, unknown, void, CreatePostRequest, UpdatePathParams>("PUT", (paramsInPath: UpdatePathParams) => `/api/post/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type DeleteProps = Omit<MutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除帖子
 */
export const Delete = (props: DeleteProps) => (
  <Mutate<R, unknown, void, number, void>
    verb="DELETE"
    path={`/api/post`}
    
    {...props}
  />
);

export type UseDeleteProps = Omit<UseMutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除帖子
 */
export const useDelete = (props: UseDeleteProps) => useMutate<R, unknown, void, number, void>("DELETE", `/api/post`, {   ...props });


export interface Position1PathParams {
  id: number
}

export type Position1Props = Omit<GetProps<R, unknown, void, Position1PathParams>, "path"> & Position1PathParams;

/**
 * 获取某职位的详细信息
 */
export const Position1 = ({id, ...props}: Position1Props) => (
  <Get<R, unknown, void, Position1PathParams>
    path={`/api/position/${id}`}
    
    {...props}
  />
);

export type UsePosition1Props = Omit<UseGetProps<R, unknown, void, Position1PathParams>, "path"> & Position1PathParams;

/**
 * 获取某职位的详细信息
 */
export const usePosition1 = ({id, ...props}: UsePosition1Props) => useGet<R, unknown, void, Position1PathParams>((paramsInPath: Position1PathParams) => `/api/position/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PositionPathParams {
  id: number
}

export interface PositionRequestBody {[key: string]: any}

export type PositionProps = Omit<MutateProps<R, unknown, void, PositionRequestBody, PositionPathParams>, "path" | "verb"> & PositionPathParams;

/**
 * 更新某职位的信息
 */
export const Position = ({id, ...props}: PositionProps) => (
  <Mutate<R, unknown, void, PositionRequestBody, PositionPathParams>
    verb="PUT"
    path={`/api/position/${id}`}
    
    {...props}
  />
);

export type UsePositionProps = Omit<UseMutateProps<R, unknown, void, PositionRequestBody, PositionPathParams>, "path" | "verb"> & PositionPathParams;

/**
 * 更新某职位的信息
 */
export const usePosition = ({id, ...props}: UsePositionProps) => useMutate<R, unknown, void, PositionRequestBody, PositionPathParams>("PUT", (paramsInPath: PositionPathParams) => `/api/position/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type RemovePositionProps = Omit<MutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除某职位
 */
export const RemovePosition = (props: RemovePositionProps) => (
  <Mutate<R, unknown, void, number, void>
    verb="DELETE"
    path={`/api/position`}
    
    {...props}
  />
);

export type UseRemovePositionProps = Omit<UseMutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除某职位
 */
export const useRemovePosition = (props: UseRemovePositionProps) => useMutate<R, unknown, void, number, void>("DELETE", `/api/position`, {   ...props });


export interface Company1PathParams {
  id: number
}

export type Company1Props = Omit<GetProps<R, unknown, void, Company1PathParams>, "path"> & Company1PathParams;

/**
 * 获取某公司的详细信息
 */
export const Company1 = ({id, ...props}: Company1Props) => (
  <Get<R, unknown, void, Company1PathParams>
    path={`/api/company/${id}`}
    
    {...props}
  />
);

export type UseCompany1Props = Omit<UseGetProps<R, unknown, void, Company1PathParams>, "path"> & Company1PathParams;

/**
 * 获取某公司的详细信息
 */
export const useCompany1 = ({id, ...props}: UseCompany1Props) => useGet<R, unknown, void, Company1PathParams>((paramsInPath: Company1PathParams) => `/api/company/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface CompanyPathParams {
  id: number
}

export interface CompanyRequestBody {[key: string]: any}

export type CompanyProps = Omit<MutateProps<R, unknown, void, CompanyRequestBody, CompanyPathParams>, "path" | "verb"> & CompanyPathParams;

/**
 * 更新某公司的信息
 */
export const Company = ({id, ...props}: CompanyProps) => (
  <Mutate<R, unknown, void, CompanyRequestBody, CompanyPathParams>
    verb="PUT"
    path={`/api/company/${id}`}
    
    {...props}
  />
);

export type UseCompanyProps = Omit<UseMutateProps<R, unknown, void, CompanyRequestBody, CompanyPathParams>, "path" | "verb"> & CompanyPathParams;

/**
 * 更新某公司的信息
 */
export const useCompany = ({id, ...props}: UseCompanyProps) => useMutate<R, unknown, void, CompanyRequestBody, CompanyPathParams>("PUT", (paramsInPath: CompanyPathParams) => `/api/company/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type RemoveCompanyProps = Omit<MutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除某公司
 */
export const RemoveCompany = (props: RemoveCompanyProps) => (
  <Mutate<R, unknown, void, number, void>
    verb="DELETE"
    path={`/api/company`}
    
    {...props}
  />
);

export type UseRemoveCompanyProps = Omit<UseMutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除某公司
 */
export const useRemoveCompany = (props: UseRemoveCompanyProps) => useMutate<R, unknown, void, number, void>("DELETE", `/api/company`, {   ...props });


export interface Get2PathParams {
  id: number
}

export type Get2Props = Omit<GetProps<R, unknown, void, Get2PathParams>, "path"> & Get2PathParams;

/**
 * 获取评论
 */
export const Get2 = ({id, ...props}: Get2Props) => (
  <Get<R, unknown, void, Get2PathParams>
    path={`/api/comment/${id}`}
    
    {...props}
  />
);

export type UseGet2Props = Omit<UseGetProps<R, unknown, void, Get2PathParams>, "path"> & Get2PathParams;

/**
 * 获取评论
 */
export const useGet2 = ({id, ...props}: UseGet2Props) => useGet<R, unknown, void, Get2PathParams>((paramsInPath: Get2PathParams) => `/api/comment/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface Update1PathParams {
  id: number
}

export interface Update1RequestBody {[key: string]: any}

export type Update1Props = Omit<MutateProps<R, unknown, void, Update1RequestBody, Update1PathParams>, "path" | "verb"> & Update1PathParams;

/**
 * 更新评论
 */
export const Update1 = ({id, ...props}: Update1Props) => (
  <Mutate<R, unknown, void, Update1RequestBody, Update1PathParams>
    verb="PUT"
    path={`/api/comment/${id}`}
    
    {...props}
  />
);

export type UseUpdate1Props = Omit<UseMutateProps<R, unknown, void, Update1RequestBody, Update1PathParams>, "path" | "verb"> & Update1PathParams;

/**
 * 更新评论
 */
export const useUpdate1 = ({id, ...props}: UseUpdate1Props) => useMutate<R, unknown, void, Update1RequestBody, Update1PathParams>("PUT", (paramsInPath: Update1PathParams) => `/api/comment/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type Delete1Props = Omit<MutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除评论
 */
export const Delete1 = (props: Delete1Props) => (
  <Mutate<R, unknown, void, number, void>
    verb="DELETE"
    path={`/api/comment`}
    
    {...props}
  />
);

export type UseDelete1Props = Omit<UseMutateProps<R, unknown, void, number, void>, "path" | "verb">;

/**
 * 删除评论
 */
export const useDelete1 = (props: UseDelete1Props) => useMutate<R, unknown, void, number, void>("DELETE", `/api/comment`, {   ...props });


export interface ExaminePathParams {
  id: number
}

export interface ExamineRequestBody {[key: string]: any}

export type ExamineProps = Omit<MutateProps<R, unknown, void, ExamineRequestBody, ExaminePathParams>, "path" | "verb"> & ExaminePathParams;

/**
 * 审核评论
 */
export const Examine = ({id, ...props}: ExamineProps) => (
  <Mutate<R, unknown, void, ExamineRequestBody, ExaminePathParams>
    verb="PUT"
    path={`/api/comment/${id}/examine`}
    
    {...props}
  />
);

export type UseExamineProps = Omit<UseMutateProps<R, unknown, void, ExamineRequestBody, ExaminePathParams>, "path" | "verb"> & ExaminePathParams;

/**
 * 审核评论
 */
export const useExamine = ({id, ...props}: UseExamineProps) => useMutate<R, unknown, void, ExamineRequestBody, ExaminePathParams>("PUT", (paramsInPath: ExaminePathParams) => `/api/comment/${paramsInPath.id}/examine`, {  pathParams: { id }, ...props });


export type RegisterProps = Omit<MutateProps<R, unknown, void, RegisterRequest, void>, "path" | "verb">;

/**
 * 用户注册
 */
export const Register = (props: RegisterProps) => (
  <Mutate<R, unknown, void, RegisterRequest, void>
    verb="POST"
    path={`/api/user/register`}
    
    {...props}
  />
);

export type UseRegisterProps = Omit<UseMutateProps<R, unknown, void, RegisterRequest, void>, "path" | "verb">;

/**
 * 用户注册
 */
export const useRegister = (props: UseRegisterProps) => useMutate<R, unknown, void, RegisterRequest, void>("POST", `/api/user/register`, props);


export type LoginProps = Omit<MutateProps<R, unknown, void, LoginRequest, void>, "path" | "verb">;

/**
 * 用户登陆
 */
export const Login = (props: LoginProps) => (
  <Mutate<R, unknown, void, LoginRequest, void>
    verb="POST"
    path={`/api/user/login`}
    
    {...props}
  />
);

export type UseLoginProps = Omit<UseMutateProps<R, unknown, void, LoginRequest, void>, "path" | "verb">;

/**
 * 用户登陆
 */
export const useLogin = (props: UseLoginProps) => useMutate<R, unknown, void, LoginRequest, void>("POST", `/api/user/login`, props);


export interface BanPathParams {
  id: number
}

export type BanProps = Omit<MutateProps<R, unknown, void, void, BanPathParams>, "path" | "verb"> & BanPathParams;

/**
 * 封禁用户
 */
export const Ban = ({id, ...props}: BanProps) => (
  <Mutate<R, unknown, void, void, BanPathParams>
    verb="POST"
    path={`/api/user/ban/${id}`}
    
    {...props}
  />
);

export type UseBanProps = Omit<UseMutateProps<R, unknown, void, void, BanPathParams>, "path" | "verb"> & BanPathParams;

/**
 * 封禁用户
 */
export const useBan = ({id, ...props}: UseBanProps) => useMutate<R, unknown, void, void, BanPathParams>("POST", (paramsInPath: BanPathParams) => `/api/user/ban/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface TicketPathParams {
  ticketId: number
}

export type TicketProps = Omit<GetProps<R, unknown, void, TicketPathParams>, "path"> & TicketPathParams;

/**
 * 获取对应工单信息
 */
export const Ticket = ({ticketId, ...props}: TicketProps) => (
  <Get<R, unknown, void, TicketPathParams>
    path={`/api/ticket/${ticketId}`}
    
    {...props}
  />
);

export type UseTicketProps = Omit<UseGetProps<R, unknown, void, TicketPathParams>, "path"> & TicketPathParams;

/**
 * 获取对应工单信息
 */
export const useTicket = ({ticketId, ...props}: UseTicketProps) => useGet<R, unknown, void, TicketPathParams>((paramsInPath: TicketPathParams) => `/api/ticket/${paramsInPath.ticketId}`, {  pathParams: { ticketId }, ...props });


export interface PostPathParams {
  ticketId: number
}

export interface PostRequestBody {[key: string]: any}

export type PostProps = Omit<MutateProps<R, unknown, void, PostRequestBody, PostPathParams>, "path" | "verb"> & PostPathParams;

/**
 * 为工单增加回复
 */
export const Post = ({ticketId, ...props}: PostProps) => (
  <Mutate<R, unknown, void, PostRequestBody, PostPathParams>
    verb="POST"
    path={`/api/ticket/${ticketId}`}
    
    {...props}
  />
);

export type UsePostProps = Omit<UseMutateProps<R, unknown, void, PostRequestBody, PostPathParams>, "path" | "verb"> & PostPathParams;

/**
 * 为工单增加回复
 */
export const usePost = ({ticketId, ...props}: UsePostProps) => useMutate<R, unknown, void, PostRequestBody, PostPathParams>("POST", (paramsInPath: PostPathParams) => `/api/ticket/${paramsInPath.ticketId}`, {  pathParams: { ticketId }, ...props });


export interface CreateRequestBody {[key: string]: any}

export type CreateProps = Omit<MutateProps<R, unknown, void, CreateRequestBody, void>, "path" | "verb">;

/**
 * 创建工单
 */
export const Create = (props: CreateProps) => (
  <Mutate<R, unknown, void, CreateRequestBody, void>
    verb="POST"
    path={`/api/ticket/`}
    
    {...props}
  />
);

export type UseCreateProps = Omit<UseMutateProps<R, unknown, void, CreateRequestBody, void>, "path" | "verb">;

/**
 * 创建工单
 */
export const useCreate = (props: UseCreateProps) => useMutate<R, unknown, void, CreateRequestBody, void>("POST", `/api/ticket/`, props);


export type Post1Props = Omit<MutateProps<R, unknown, void, CreatePostRequest, void>, "path" | "verb">;

/**
 * 发表一条帖子
 */
export const Post1 = (props: Post1Props) => (
  <Mutate<R, unknown, void, CreatePostRequest, void>
    verb="POST"
    path={`/api/post/`}
    
    {...props}
  />
);

export type UsePost1Props = Omit<UseMutateProps<R, unknown, void, CreatePostRequest, void>, "path" | "verb">;

/**
 * 发表一条帖子
 */
export const usePost1 = (props: UsePost1Props) => useMutate<R, unknown, void, CreatePostRequest, void>("POST", `/api/post/`, props);


export interface AddTagPathParams {
  id: number
}

export type AddTagProps = Omit<MutateProps<R, unknown, void, void, AddTagPathParams>, "path" | "verb"> & AddTagPathParams;

/**
 * 为论坛添加标签
 */
export const AddTag = ({id, ...props}: AddTagProps) => (
  <Mutate<R, unknown, void, void, AddTagPathParams>
    verb="POST"
    path={`/api/forum/${id}/tag`}
    
    {...props}
  />
);

export type UseAddTagProps = Omit<UseMutateProps<R, unknown, void, void, AddTagPathParams>, "path" | "verb"> & AddTagPathParams;

/**
 * 为论坛添加标签
 */
export const useAddTag = ({id, ...props}: UseAddTagProps) => useMutate<R, unknown, void, void, AddTagPathParams>("POST", (paramsInPath: AddTagPathParams) => `/api/forum/${paramsInPath.id}/tag`, {  pathParams: { id }, ...props });


export interface Create1RequestBody {[key: string]: any}

export type Create1Props = Omit<MutateProps<R, unknown, void, Create1RequestBody, void>, "path" | "verb">;

/**
 * 创建一个论坛
 */
export const Create1 = (props: Create1Props) => (
  <Mutate<R, unknown, void, Create1RequestBody, void>
    verb="POST"
    path={`/api/forum/`}
    
    {...props}
  />
);

export type UseCreate1Props = Omit<UseMutateProps<R, unknown, void, Create1RequestBody, void>, "path" | "verb">;

/**
 * 创建一个论坛
 */
export const useCreate1 = (props: UseCreate1Props) => useMutate<R, unknown, void, Create1RequestBody, void>("POST", `/api/forum/`, props);


export interface Post2PathParams {
  postId: number
}

export interface Post2RequestBody {[key: string]: any}

export type Post2Props = Omit<MutateProps<R, unknown, void, Post2RequestBody, Post2PathParams>, "path" | "verb"> & Post2PathParams;

/**
 * 新增评论
 */
export const Post2 = ({postId, ...props}: Post2Props) => (
  <Mutate<R, unknown, void, Post2RequestBody, Post2PathParams>
    verb="POST"
    path={`/api/comment/${postId}`}
    
    {...props}
  />
);

export type UsePost2Props = Omit<UseMutateProps<R, unknown, void, Post2RequestBody, Post2PathParams>, "path" | "verb"> & Post2PathParams;

/**
 * 新增评论
 */
export const usePost2 = ({postId, ...props}: UsePost2Props) => useMutate<R, unknown, void, Post2RequestBody, Post2PathParams>("POST", (paramsInPath: Post2PathParams) => `/api/comment/${paramsInPath.postId}`, {  pathParams: { postId }, ...props });


export interface RePathParams {
  id: number
}

export interface ReRequestBody {[key: string]: any}

export type ReProps = Omit<MutateProps<R, unknown, void, ReRequestBody, RePathParams>, "path" | "verb"> & RePathParams;

/**
 * 二级评论
 */
export const Re = ({id, ...props}: ReProps) => (
  <Mutate<R, unknown, void, ReRequestBody, RePathParams>
    verb="POST"
    path={`/api/comment/${id}/re`}
    
    {...props}
  />
);

export type UseReProps = Omit<UseMutateProps<R, unknown, void, ReRequestBody, RePathParams>, "path" | "verb"> & RePathParams;

/**
 * 二级评论
 */
export const useRe = ({id, ...props}: UseReProps) => useMutate<R, unknown, void, ReRequestBody, RePathParams>("POST", (paramsInPath: RePathParams) => `/api/comment/${paramsInPath.id}/re`, {  pathParams: { id }, ...props });


export interface EmailRequestBody {[key: string]: any}

export type EmailProps = Omit<MutateProps<R, unknown, void, EmailRequestBody, void>, "path" | "verb">;

/**
 * 向邮箱发送验证码
 */
export const Email = (props: EmailProps) => (
  <Mutate<R, unknown, void, EmailRequestBody, void>
    verb="POST"
    path={`/api/captcha/email`}
    
    {...props}
  />
);

export type UseEmailProps = Omit<UseMutateProps<R, unknown, void, EmailRequestBody, void>, "path" | "verb">;

/**
 * 向邮箱发送验证码
 */
export const useEmail = (props: UseEmailProps) => useMutate<R, unknown, void, EmailRequestBody, void>("POST", `/api/captcha/email`, props);


export type ListProps = Omit<GetProps<R, unknown, void, void>, "path">;

/**
 * 获取所有用户的列表
 */
export const List = (props: ListProps) => (
  <Get<R, unknown, void, void>
    path={`/api/user/list`}
    
    {...props}
  />
);

export type UseListProps = Omit<UseGetProps<R, unknown, void, void>, "path">;

/**
 * 获取所有用户的列表
 */
export const useList = (props: UseListProps) => useGet<R, unknown, void, void>(`/api/user/list`, props);


export interface List1PathParams {
  type: string
}

export type List1Props = Omit<GetProps<R, unknown, void, List1PathParams>, "path"> & List1PathParams;

/**
 * 获取指定类型的所有用户的列表
 */
export const List1 = ({type, ...props}: List1Props) => (
  <Get<R, unknown, void, List1PathParams>
    path={`/api/user/list/${type}`}
    
    {...props}
  />
);

export type UseList1Props = Omit<UseGetProps<R, unknown, void, List1PathParams>, "path"> & List1PathParams;

/**
 * 获取指定类型的所有用户的列表
 */
export const useList1 = ({type, ...props}: UseList1Props) => useGet<R, unknown, void, List1PathParams>((paramsInPath: List1PathParams) => `/api/user/list/${paramsInPath.type}`, {  pathParams: { type }, ...props });


export type List2Props = Omit<GetProps<R, unknown, void, void>, "path">;

/**
 * 获取所有工单列表
 */
export const List2 = (props: List2Props) => (
  <Get<R, unknown, void, void>
    path={`/api/ticket/list`}
    
    {...props}
  />
);

export type UseList2Props = Omit<UseGetProps<R, unknown, void, void>, "path">;

/**
 * 获取所有工单列表
 */
export const useList2 = (props: UseList2Props) => useGet<R, unknown, void, void>(`/api/ticket/list`, props);


export interface FollowPathParams {
  id: number
}

export type FollowProps = Omit<GetProps<R, unknown, void, FollowPathParams>, "path"> & FollowPathParams;

/**
 * 关注职位
 */
export const Follow = ({id, ...props}: FollowProps) => (
  <Get<R, unknown, void, FollowPathParams>
    path={`/api/position/follow/${id}`}
    
    {...props}
  />
);

export type UseFollowProps = Omit<UseGetProps<R, unknown, void, FollowPathParams>, "path"> & FollowPathParams;

/**
 * 关注职位
 */
export const useFollow = ({id, ...props}: UseFollowProps) => useGet<R, unknown, void, FollowPathParams>((paramsInPath: FollowPathParams) => `/api/position/follow/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type List3Props = Omit<GetProps<R, unknown, void, void>, "path">;

/**
 * 获取全部职位列表
 */
export const List3 = (props: List3Props) => (
  <Get<R, unknown, void, void>
    path={`/api/position/`}
    
    {...props}
  />
);

export type UseList3Props = Omit<UseGetProps<R, unknown, void, void>, "path">;

/**
 * 获取全部职位列表
 */
export const useList3 = (props: UseList3Props) => useGet<R, unknown, void, void>(`/api/position/`, props);


export interface Get1PathParams {
  id: number
}

export type Get1Props = Omit<GetProps<R, unknown, void, Get1PathParams>, "path"> & Get1PathParams;

/**
 * 获取论坛的具体信息
 */
export const Get1 = ({id, ...props}: Get1Props) => (
  <Get<R, unknown, void, Get1PathParams>
    path={`/api/forum/${id}`}
    
    {...props}
  />
);

export type UseGet1Props = Omit<UseGetProps<R, unknown, void, Get1PathParams>, "path"> & Get1PathParams;

/**
 * 获取论坛的具体信息
 */
export const useGet1 = ({id, ...props}: UseGet1Props) => useGet<R, unknown, void, Get1PathParams>((paramsInPath: Get1PathParams) => `/api/forum/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type List4Props = Omit<GetProps<R, unknown, void, void>, "path">;

/**
 * 获取论坛列表
 */
export const List4 = (props: List4Props) => (
  <Get<R, unknown, void, void>
    path={`/api/forum/list`}
    
    {...props}
  />
);

export type UseList4Props = Omit<UseGetProps<R, unknown, void, void>, "path">;

/**
 * 获取论坛列表
 */
export const useList4 = (props: UseList4Props) => useGet<R, unknown, void, void>(`/api/forum/list`, props);


export interface Follow1PathParams {
  id: number
}

export type Follow1Props = Omit<GetProps<R, unknown, void, Follow1PathParams>, "path"> & Follow1PathParams;

/**
 * 关注公司
 */
export const Follow1 = ({id, ...props}: Follow1Props) => (
  <Get<R, unknown, void, Follow1PathParams>
    path={`/api/company/follow/${id}`}
    
    {...props}
  />
);

export type UseFollow1Props = Omit<UseGetProps<R, unknown, void, Follow1PathParams>, "path"> & Follow1PathParams;

/**
 * 关注公司
 */
export const useFollow1 = ({id, ...props}: UseFollow1Props) => useGet<R, unknown, void, Follow1PathParams>((paramsInPath: Follow1PathParams) => `/api/company/follow/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type ListCompanyProps = Omit<GetProps<R, unknown, void, void>, "path">;

/**
 * list
 * 
 * 获取全部公司列表
 */
export const ListCompany = (props: ListCompanyProps) => (
  <Get<R, unknown, void, void>
    path={`/api/company/`}
    
    {...props}
  />
);

export type UseListCompanyProps = Omit<UseGetProps<R, unknown, void, void>, "path">;

/**
 * list
 * 
 * 获取全部公司列表
 */
export const useListCompany = (props: UseListCompanyProps) => useGet<R, unknown, void, void>(`/api/company/`, props);

